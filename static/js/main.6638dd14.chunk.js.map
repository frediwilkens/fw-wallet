{"version":3,"sources":["services/api.js","actions/index.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.js","components/Header.jsx","components/Input.jsx","components/Select.jsx","components/Button.jsx","components/Table.jsx","pages/Wallet.js","App.js","index.js"],"names":["fetchAPI","fetch","then","response","json","rates","newExpense","state","type","payload","expense","INITIAL_STATE","email","currencies","expenses","total","rootReducer","combineReducers","user","action","wallet","id","length","exchangeRates","parseFloat","value","currency","ask","neoExpe","subtracted","store","createStore","composeWithDevTools","applyMiddleware","thunk","Login","handleChange","target","name","setState","validation","password","emailValidation","test","passwordValidation","dispatchAndPush","props","history","userDispatch","push","this","className","data-testid","placeholder","onChange","disabled","onClick","React","Component","connect","dispatch","Header","getTotal","reduce","prev","curr","Number","toFixed","showUser","emailField","totalField","headerCurrencyField","Input","labelText","nameClass","htmlFor","defaultProps","Select","labelName","options","testid","required","map","option","index","key","Button","Table","deleteExpense","bind","deleteDispatch","numberName","parseInt","neoExpenses","filter","currencyValue","description","tag","method","currencyName","split","conversion","conv","subtract","methods","tags","Wallet","getCurrencies","a","Object","keys","addExpense","expenseDispatch","App","exact","path","component","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.6638dd14.chunk.js","sourcesContent":["const API = 'https://economia.awesomeapi.com.br/json/all';\n\nconst fetchAPI = () => fetch(API)\n  .then((response) => response.json())\n  .then((rates) => rates);\n\nexport default fetchAPI;\n","// Coloque aqui suas actions\nimport fetchAPI from '../services/api';\n\nexport const USER_LOGIN = 'USER_LOGIN';\nexport const NEW_EXPENSE = 'NEW_EXPENSE';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\n\nexport const userLogin = (email) => ({\n  type: USER_LOGIN,\n  payload: email,\n});\n\nexport const newExpense = (state, rates) => ({\n  type: NEW_EXPENSE,\n  payload: {\n    expense: { ...state },\n    rates,\n  },\n});\n\nexport const deleteExpense = (neoExpe, subtracted) => ({\n  type: DELETE_EXPENSE,\n  payload: {\n    neoExpe,\n    subtracted,\n  },\n});\n\nexport const exchangeRates = (state) => (\n  async (dispatch) => {\n    const rates = await fetchAPI();\n    return dispatch(newExpense(state, rates));\n  }\n);\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { USER_LOGIN } from '../actions';\n\nexport const INITIAL_STATE = {\n  email: '',\n};\n\nexport const user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case USER_LOGIN:\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { DELETE_EXPENSE, NEW_EXPENSE } from '../actions';\n\nexport const INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  total: 0,\n};\n\nexport const wallet = (state = INITIAL_STATE, action) => {\n  const { payload } = action;\n  switch (action.type) {\n  case NEW_EXPENSE:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        {\n          ...payload.expense,\n          id: state.expenses.length,\n          exchangeRates: payload.rates,\n        },\n      ],\n      total: (state.total) + (\n        parseFloat(payload.expense.value)\n        * parseFloat(payload.rates[payload.expense.currency].ask)\n      ),\n    };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: action.payload.neoExpe,\n      total: payload.subtracted,\n    };\n  default:\n    return state;\n  }\n};\n","// import user from './user';\n// import wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nimport { combineReducers } from 'redux';\nimport { user } from './user';\nimport { wallet } from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { userLogin } from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n    };\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  validation = () => {\n    const { email, password } = this.state;\n    const numberValidation = 6;\n    const emailValidation = (/\\S+@\\S+\\.\\S+/).test(email);\n    const passwordValidation = password.length < numberValidation;\n    return !emailValidation || passwordValidation;\n  }\n\n  dispatchAndPush = () => {\n    const { history, userDispatch } = this.props;\n    const { email } = this.state;\n    userDispatch(email);\n    history.push('/wallet');\n  }\n\n  render() {\n    const { email, password } = this.state;\n    return (\n      <form>\n        <fieldset className=\"login-box\">\n          <h1 className=\"title\">LOGIN</h1>\n          <input\n            data-testid=\"email-input\"\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"email\"\n            value={ email }\n            onChange={ this.handleChange }\n            id=\"email-input\"\n          />\n\n          <input\n            data-testid=\"password-input\"\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            value={ password }\n            onChange={ this.handleChange }\n            id=\"password-input\"\n          />\n\n          <button\n            type=\"button\"\n            disabled={ this.validation() }\n            onClick={ this.dispatchAndPush }\n            id=\"login-btn\"\n          >\n            Sign in\n          </button>\n\n        </fieldset>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  userDispatch: (value) => dispatch(userLogin(value)),\n});\n\nLogin.propTypes = {\n  userDispatch: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  getTotal = () => {\n    const { expenses } = this.props;\n    return expenses.reduce((prev, curr) => {\n      const currencyValue = Number(curr.exchangeRates[curr.currency].ask);\n      const newTotal = currencyValue * Number(curr.value);\n      return prev + newTotal;\n    }, 0).toFixed(2);\n  };\n\n  render() {\n    const { showUser, emailField,\n      totalField, headerCurrencyField } = this.props;\n    return (\n      <header>\n        <h2 data-testid={ emailField }>\n          { showUser }\n        </h2>\n        <h2>\n          Total:\n          {' '}\n          <span data-testid={ totalField }>\n            { this.getTotal() }\n          </span>\n          {' '}\n          <span data-testid={ headerCurrencyField }>\n            BRL\n          </span>\n        </h2>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  showUser: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  emailField: PropTypes.string.isRequired,\n  totalField: PropTypes.string.isRequired,\n  headerCurrencyField: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Input extends React.Component {\n  render() {\n    const { id, labelText, type,\n      name, placeholder, value,\n      onChange, nameClass } = this.props;\n    return (\n      <label htmlFor={ id }>\n        { labelText }\n        {' '}\n        <input\n          data-testid={ id }\n          type={ type }\n          name={ name }\n          placeholder={ placeholder }\n          value={ value }\n          onChange={ onChange }\n          className={ nameClass }\n          id={ id }\n        />\n      </label>\n    );\n  }\n}\n\nInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  labelText: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  nameClass: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nInput.defaultProps = {\n  placeholder: '',\n};\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Select extends React.Component {\n  render() {\n    const {\n      id, labelName,\n      onChange, name,\n      value, options, testid } = this.props;\n\n    return (\n      <label htmlFor={ id }>\n        { labelName }\n        <select\n          name={ name }\n          id={ id }\n          required\n          onChange={ onChange }\n          value={ value }\n          data-testid={ id }\n          className=\"wallet-input\"\n        >\n          { options.map((option, index) => (\n            <option\n              key={ option }\n              value={ option }\n              className=\"wallet-input\"\n              data-testid={ testid[index] }\n            >\n              { option }\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n}\n\nSelect.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  labelName: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  testid: PropTypes.arrayOf(PropTypes.string),\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nSelect.defaultProps = {\n  testid: [],\n};\n\nexport default Select;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Button extends Component {\n  render() {\n    const { labelName, onClick } = this.props;\n    return (\n      <button\n        type=\"button\"\n        onClick={ onClick }\n        className=\"btn\"\n      >\n        { labelName }\n      </button>\n    );\n  }\n}\n\nexport default Button;\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  labelName: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteExpense } from '../actions';\n\nclass Table extends React.Component {\n  constructor() {\n    super();\n\n    this.deleteExpense = this.deleteExpense.bind(this);\n  }\n\n  deleteExpense({ target }) {\n    const { expenses, deleteDispatch } = this.props;\n    const numberName = parseInt(target.name, 10);\n\n    const neoExpenses = expenses.filter(({ id }) => id !== numberName);\n\n    const total = neoExpenses.reduce((prev, curr) => {\n      const currencyValue = parseFloat(curr.exchangeRates[curr.currency].ask);\n      const conversion = parseFloat(curr.value) * currencyValue;\n      return prev + conversion;\n    }, 0);\n\n    deleteDispatch(neoExpenses, total);\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            expenses.map((expense) => {\n              const { description, tag,\n                method, value, id,\n                currency, exchangeRates } = expense;\n\n              const completeName = exchangeRates[currency].name;\n              const currencyName = completeName.split('/');\n              const conversion = (Number(exchangeRates[currency].ask));\n              const conv = (Number(value) * Number(conversion)).toFixed(2);\n\n              return (\n                <tr key={ id }>\n                  <td>{ description }</td>\n                  <td>{ tag }</td>\n                  <td>{ method }</td>\n                  <td>{ value }</td>\n                  <td>{ currencyName[0] }</td>\n                  <td>{ conversion.toFixed(2) }</td>\n                  <td>{ conv }</td>\n                  <td>Real</td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      className=\"delete-btn\"\n                      data-testid=\"delete-btn\"\n                      name={ id }\n                      onClick={ this.deleteExpense }\n                    >\n                      Excluir\n                    </button>\n                  </td>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteDispatch: (neoExpe, subtract) => dispatch(deleteExpense(neoExpe, subtract)),\n});\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteDispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Input from '../components/Input';\nimport Select from '../components/Select';\nimport Button from '../components/Button';\nimport { exchangeRates } from '../actions';\nimport fetchAPI from '../services/api';\nimport Table from '../components/Table';\n\nconst food = 'Food';\n\nconst INITIAL_STATE = {\n  value: '',\n  description: '',\n  currency: 'USD',\n  currencies: [],\n  method: 'Cash',\n  methods: ['Cash', 'Credit Card', 'Debit Card'],\n  tag: food,\n  tags: ['Food', 'Fun', 'Work', 'Transport', 'Health'],\n};\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n\n    this.state = INITIAL_STATE;\n  }\n\n  componentDidMount() {\n    this.getCurrencies();\n  }\n\n  getCurrencies = async () => {\n    const filter = 'USDT';\n    const rates = await fetchAPI();\n    const currencies = Object.keys(rates)\n      .filter((currency) => currency !== filter);\n\n    this.setState({\n      currencies,\n    });\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  addExpense = () => {\n    const { expenseDispatch } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    const formData = {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n    };\n    expenseDispatch(formData);\n\n    this.setState({\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Cash',\n      tag: food,\n    });\n  }\n\n  render() {\n    const { email } = this.props;\n    const { value,\n      description, currency,\n      currencies, method, methods,\n      tag, tags } = this.state;\n    return (\n      <div>\n        <Header\n          showUser={ email }\n          emailField=\"email-field\"\n          totalField=\"total-field\"\n          headerCurrencyField=\"header-currency-field\"\n        />\n\n        <form className=\"wallet-box\">\n          <Input\n            labelText=\"Value:\"\n            id=\"value-input\"\n            type=\"text\"\n            name=\"value\"\n            placeholder=\"Value\"\n            value={ value }\n            onChange={ this.handleChange }\n            nameClass=\"wallet-input\"\n          />\n          <Input\n            labelText=\"Description:\"\n            id=\"description-input\"\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            value={ description }\n            onChange={ this.handleChange }\n            nameClass=\"wallet-input\"\n          />\n          <Select\n            id=\"currency-input\"\n            labelName=\"Moeda:\"\n            onChange={ this.handleChange }\n            value={ currency }\n            options={ currencies }\n            name=\"currency\"\n            testid={ currencies }\n          />\n          <Select\n            id=\"method-input\"\n            labelName=\"Method:\"\n            onChange={ this.handleChange }\n            value={ method }\n            options={ methods }\n            name=\"method\"\n          />\n          <Select\n            id=\"tag-input\"\n            labelName=\"Tag:\"\n            onChange={ this.handleChange }\n            value={ tag }\n            options={ tags }\n            name=\"tag\"\n          />\n          <Button\n            labelName=\"Adicionar despesa\"\n            onClick={ this.addExpense }\n          />\n        </form>\n        <Table />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  expenseDispatch: (value) => dispatch(exchangeRates(value)),\n});\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenseDispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/wallet\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter basename={ process.env.PUBLIC_URL }>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}